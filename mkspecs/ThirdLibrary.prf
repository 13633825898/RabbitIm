mingw{
        equals(QMAKE_HOST.os, Windows){
            PKG_CONFIG_PATH="$${THIRD_LIBRARY_PATH}/lib/pkgconfig;$$(PKG_CONFIG_PATH)"
        } else {
            PKG_CONFIG_SYSROOT_DIR=$${THIRD_LIBRARY_PATH}
        }
} else : msvc {
        PKG_CONFIG_SYSROOT_DIR=$${THIRD_LIBRARY_PATH}
        PKG_CONFIG_LIBDIR=$${THIRD_LIBRARY_PATH}/lib/pkgconfig
} else : android {
        PKG_CONFIG_SYSROOT_DIR=$${THIRD_LIBRARY_PATH}
        equals(QMAKE_HOST.os, Windows){
            PKG_CONFIG_LIBDIR=$${THIRD_LIBRARY_PATH}/lib/pkgconfig;$${THIRD_LIBRARY_PATH}/libs/$${ANDROID_TARGET_ARCH}/pkgconfig
        } else {
            PKG_CONFIG_LIBDIR=$${THIRD_LIBRARY_PATH}/lib/pkgconfig:$${THIRD_LIBRARY_PATH}/libs/$${ANDROID_TARGET_ARCH}/pkgconfig
        }
} else {
        PKG_CONFIG_PATH="$${THIRD_LIBRARY_PATH}/lib/pkgconfig:$$(PKG_CONFIG_PATH)"
}

isEmpty(PKG_CONFIG) : PKG_CONFIG=$$(PKG_CONFIG)
defineReplace(myPkgConfigExecutable) {
    isEmpty(PKG_CONFIG) {
        PKG_CONFIG = pkg-config 
    }

    equals(RABBITIM_USE_STATIC, 1) {
        PKG_CONFIG *= --static
    }

    sysroot.name = PKG_CONFIG_SYSROOT_DIR
    sysroot.value = $$PKG_CONFIG_SYSROOT_DIR
    libdir.name = PKG_CONFIG_LIBDIR
    libdir.value = $$PKG_CONFIG_LIBDIR
    path.name = PKG_CONFIG_PATH
    path.value = $$PKG_CONFIG_PATH
    qtAddToolEnv(PKG_CONFIG, sysroot libdir path, SYS)

    equals(QMAKE_HOST.os, Windows): \
        PKG_CONFIG += 2> NUL
    else: \
        PKG_CONFIG += 2> /dev/null

    return($$PKG_CONFIG)
}

defineTest(myPackagesExist) {
    pkg_config = $$myPkgConfigExecutable()

    for(package, ARGS) {
        !system($$pkg_config --exists $$package) {
            message("Warring: package $$package is not exist.")
            return(false)
        }
    }

    return(true)
}

#第三方依赖库  
equals(RABBITIM_USE_QXMPP, 1) {
    CONFIG(release, debug|release) {
        myPackagesExist(qxmpp) {
            DEFINES *= RABBITIM_USE_QXMPP
            MYPKGCONFIG += qxmpp
        } else : msvc {
            DEFINES *= RABBITIM_USE_QXMPP
            LIBS += -lqxmpp0
        }
    } else {
        myPackagesExist(qxmpp_d) {
            DEFINES *= RABBITIM_USE_QXMPP
            MYPKGCONFIG += qxmpp_d
        }else : msvc {
            DEFINES *= RABBITIM_USE_QXMPP
            LIBS += -lqxmpp_d0
        }
    }
}

equals(RABBITIM_USE_FFMPEG, 1) : packagesExist(libavcodec libavformat libswscale libavutil) {
    DEFINES *= RABBITIM_USE_FFMPEG __STDC_CONSTANT_MACROS #ffmpeg需要  
    MYPKGCONFIG *= libavcodec libavformat libswscale libavutil 
}

equals(RABBITIM_USE_PJSIP, 1) : packagesExist(libpjproject){
    DEFINES += RABBITIM_USE_PJSIP
    equals(RABBITIM_USE_PJSIP_CAMERA, 1) {
        DEFINES += RABBITIM_USE_PJSIP_CAMERA
    }
    MYPKGCONFIG *= libpjproject
}

equals(RABBITIM_USE_OPENCV, 1){
    DEFINES *= RABBITIM_USE_OPENCV
    OPENCV_LIBRARY= -lopencv_video$$OPENCV_VERSION -lopencv_videoio$$OPENCV_VERSION \
                    -lopencv_imgproc$$OPENCV_VERSION \
                    -lopencv_core$$OPENCV_VERSION

    android{
        OPENCV_LIBRARY += \
                         -lopencv_androidcamera \
                         -lopencv_imgcodecs \
                         -lopencv_info \
                         -llibjpeg
    }else{
        OPENCV_LIBRARY += -lzlib
    }

    win32{
        OPENCV_LIBRARY += -lopencv_imgcodecs$$OPENCV_VERSION
        OPENCV_LIBRARY += -lOle32 -lolepro32 -loleaut32 -luuid #dshow依赖库  
    }
}else:android{
    message("android video capture need opencv, please set RABBITIM_USE_OPENCV=1")
}

equals(QXMPP_USE_SPEEX, 1) : packagesExist(speex) {
    MYPKGCONFIG *= speex
}

equals(QXMPP_USE_VPX, 1) : packagesExist(vpx){
    MYPKGCONFIG *= vpx
}

packagesExist(libqrencode) {
    DEFINES *= RABBITIM_USE_LIBQRENCODE
    MYPKGCONFIG *= libqrencode
}

packagesExist(QZXing) {
    DEFINES *= RABBITIM_USE_QZXING
    MYPKGCONFIG *= QZXing
} else : msvc {
    DEFINES *= RABBITIM_USE_QZXING
    LIBS += -lQZXing2
}

equals(RABBITIM_USE_LIBCURL, 1) {
    packagesExist(libcurl) {
        DEFINES *= RABBITIM_USE_LIBCURL
        MYPKGCONFIG *= libcurl
    } else : msvc {
        DEFINES *= RABBITIM_USE_LIBCURL
        LIBS += -llibcurl
    }
}

equals(RABBITIM_USE_OPENSSL, 1) {
    packagesExist(openssl) {
        DEFINES *= RABBITIM_USE_OPENSSL
        MYPKGCONFIG *= openssl
    } else : msvc {
        DEFINES *= RABBITIM_USE_OPENSSL
        LIBS += -llibeay32 -lssleay32 
    }
}

#增加第三方依赖库到 LIBS 和 QMAKE_CXXFLAGS  
PKG_CONFIG = $$myPkgConfigExecutable()
message("PKG_CONFIG:$$PKG_CONFIG")
# qmake supports no empty list elements, so the outer loop is a bit arcane
pkgsfx =
for(ever) {
    pkgvar = MYPKGCONFIG$$pkgsfx
    libvar = LIBS$$pkgsfx
    for(PKGCONFIG_LIB, $$list($$unique($$pkgvar))) {
        # don't proceed if the .pro asks for a package we don't have!
        !myPackagesExist($$PKGCONFIG_LIB): error("$$PKGCONFIG_LIB development package not found")

        PKGCONFIG_CFLAGS = $$system($$PKG_CONFIG --cflags $$PKGCONFIG_LIB)

        PKGCONFIG_INCLUDEPATH = $$find(PKGCONFIG_CFLAGS, ^-I.*)
        PKGCONFIG_INCLUDEPATH ~= s/^-I(.*)/\\1/g

        PKGCONFIG_DEFINES = $$find(PKGCONFIG_CFLAGS, ^-D.*)
        PKGCONFIG_DEFINES ~= s/^-D(.*)/\\1/g

        PKGCONFIG_CFLAGS ~= s/^-[ID].*//g

        INCLUDEPATH *= $$PKGCONFIG_INCLUDEPATH
        DEFINES *= $$PKGCONFIG_DEFINES

        QMAKE_CXXFLAGS += $$PKGCONFIG_CFLAGS
        QMAKE_CFLAGS += $$PKGCONFIG_CFLAGS
        $$libvar += $$system($$PKG_CONFIG --libs $$PKGCONFIG_LIB)
    }
    !isEmpty(pkgsfx): break()
    pkgsfx = _PRIVATE
}

equals(QXMPP_USE_VPX, 1) : packagesExist(vpx){
    android {
        LIBS += -lcpu-features
    }
}

LIBS +=  $$OPENCV_LIBRARY 
message("MYPKGCONFIG:$$MYPKGCONFIG")
message("DEFINES:$$DEFINES")
message("LIBS:$$LIBS")
